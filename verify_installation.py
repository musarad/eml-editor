#!/usr/bin/env python3
"""
EML Editor - Installation Verification Script
Checks all dependencies and core functionality
"""

import sys
import os
from datetime import datetime

def check_python_version():
    """Check Python version compatibility"""
    print("üêç Python Version Check:")
    print(f"   Version: {sys.version}")
    
    if sys.version_info < (3, 8):
        print("   ‚ùå Python 3.8+ required")
        return False
    else:
        print("   ‚úÖ Python version compatible")
        return True

def check_core_dependencies():
    """Check core email processing dependencies"""
    print("\nüìß Core Email Dependencies:")
    
    try:
        import email
        import email.utils
        import email.mime.multipart
        import email.mime.text
        import mimetypes
        import base64
        import hashlib
        print("   ‚úÖ Core email modules")
    except ImportError as e:
        print(f"   ‚ùå Core email modules: {e}")
        return False
    
    try:
        from datetime import datetime, timezone, timedelta
        import json
        import re
        import os
        print("   ‚úÖ Standard library modules")
    except ImportError as e:
        print(f"   ‚ùå Standard library: {e}")
        return False
    
    return True

def check_web_dependencies():
    """Check Flask web framework dependencies"""
    print("\nüåê Web Framework Dependencies:")
    
    try:
        import flask
        try:
            version = flask.__version__
        except AttributeError:
            import importlib.metadata
            version = importlib.metadata.version('flask')
        print(f"   ‚úÖ Flask {version}")
    except ImportError as e:
        print(f"   ‚ùå Flask: {e}")
        return False
    
    try:
        import werkzeug
        try:
            version = werkzeug.__version__
        except AttributeError:
            import importlib.metadata
            version = importlib.metadata.version('werkzeug')
        print(f"   ‚úÖ Werkzeug {version}")
    except ImportError as e:
        print(f"   ‚ùå Werkzeug: {e}")
        return False
    
    try:
        import jinja2
        import markupsafe
        import itsdangerous
        import click
        import blinker
        print("   ‚úÖ Flask dependencies")
    except ImportError as e:
        print(f"   ‚ùå Flask dependencies: {e}")
        return False
    
    return True

def check_crypto_dependencies():
    """Check cryptographic dependencies"""
    print("\nüîê Cryptographic Dependencies:")
    
    try:
        import dkim
        print(f"   ‚úÖ DKIM library")
    except ImportError as e:
        print(f"   ‚ùå DKIM library: {e}")
        return False
    
    try:
        import authheaders
        print(f"   ‚úÖ Auth headers library")
    except ImportError as e:
        print(f"   ‚ùå Auth headers: {e}")
        return False
    
    try:
        import cryptography
        try:
            version = cryptography.__version__
        except AttributeError:
            import importlib.metadata
            version = importlib.metadata.version('cryptography')
        print(f"   ‚úÖ Cryptography {version}")
    except ImportError as e:
        print(f"   ‚ùå Cryptography: {e}")
        return False
    
    try:
        import dns.resolver
        print(f"   ‚úÖ DNS Python")
    except ImportError as e:
        print(f"   ‚ùå DNS Python: {e}")
        return False
    
    return True

def check_pdf_dependencies():
    """Check PDF processing dependencies"""
    print("\nüìÑ PDF Processing Dependencies:")
    
    try:
        import fitz  # PyMuPDF
        print(f"   ‚úÖ PyMuPDF (fitz)")
    except ImportError as e:
        print(f"   ‚ùå PyMuPDF: {e}")
        return False
    
    return True

def check_utility_dependencies():
    """Check utility dependencies"""
    print("\nüõ†Ô∏è Utility Dependencies:")
    
    try:
        import dateutil
        print(f"   ‚úÖ Python dateutil")
    except ImportError as e:
        print(f"   ‚ùå Python dateutil: {e}")
        return False
    
    try:
        import typing_extensions
        print(f"   ‚úÖ Typing extensions")
    except ImportError as e:
        print(f"   ‚ùå Typing extensions: {e}")
        return False
    
    return True

def check_project_modules():
    """Check project-specific modules"""
    print("\nüì¶ Project Modules:")
    
    try:
        from eml_editor import EMLEditor
        print("   ‚úÖ EML Editor")
    except ImportError as e:
        print(f"   ‚ùå EML Editor: {e}")
        return False
    
    try:
        from eml_advanced_editor import AdvancedEMLEditor
        print("   ‚úÖ Advanced EML Editor")
    except ImportError as e:
        print(f"   ‚ùå Advanced EML Editor: {e}")
        return False
    
    try:
        from eml_unified_tool import UnifiedEMLTool
        print("   ‚úÖ Unified EML Tool")
    except ImportError as e:
        print(f"   ‚ùå Unified EML Tool: {e}")
        return False
    
    try:
        from eml_crypto_signer import EMLCryptoSigner
        print("   ‚úÖ Crypto Signer")
    except ImportError as e:
        print(f"   ‚ùå Crypto Signer: {e}")
        return False
    
    try:
        from pdf_metadata_editor import set_pdf_metadata_dates
        print("   ‚úÖ PDF Metadata Editor")
    except ImportError as e:
        print(f"   ‚ùå PDF Metadata Editor: {e}")
        return False
    
    try:
        from web_app import app
        print("   ‚úÖ Web Application")
    except ImportError as e:
        print(f"   ‚ùå Web Application: {e}")
        return False
    
    return True

def check_functionality():
    """Test basic functionality"""
    print("\nüß™ Functionality Tests:")
    
    try:
        # Test EML creation
        import email.mime.text
        msg = email.mime.text.MIMEText("Test message")
        msg['From'] = 'test@example.com'
        msg['To'] = 'recipient@example.com'
        msg['Subject'] = 'Test'
        print("   ‚úÖ Basic EML creation")
    except Exception as e:
        print(f"   ‚ùå EML creation: {e}")
        return False
    
    try:
        # Test crypto availability
        from eml_crypto_signer import EMLCryptoSigner
        print("   ‚úÖ Crypto signer available")
    except Exception as e:
        print(f"   ‚ùå Crypto signer: {e}")
        return False
    
    try:
        # Test PDF processing
        import fitz
        print("   ‚úÖ PDF processing available")
    except Exception as e:
        print(f"   ‚ùå PDF processing: {e}")
        return False
    
    return True

def main():
    """Main verification function"""
    print("üîç EML Editor Installation Verification")
    print("=" * 50)
    
    checks = [
        check_python_version(),
        check_core_dependencies(),
        check_web_dependencies(),
        check_crypto_dependencies(),
        check_pdf_dependencies(),
        check_utility_dependencies(),
        check_project_modules(),
        check_functionality()
    ]
    
    print("\n" + "=" * 50)
    print("üìä VERIFICATION SUMMARY")
    print("=" * 50)
    
    passed = sum(checks)
    total = len(checks)
    
    if passed == total:
        print(f"üéâ ALL CHECKS PASSED ({passed}/{total})")
        print("\n‚úÖ Installation is complete and ready to use!")
        print("\nüöÄ You can now run:")
        print("   ‚Ä¢ python3 web_app.py (Web interface)")
        print("   ‚Ä¢ python3 eml_unified_tool.py (Command line)")
        print("   ‚Ä¢ python3 example_eml_modifications.py (Examples)")
        return True
    else:
        print(f"‚ùå SOME CHECKS FAILED ({passed}/{total})")
        print("\nüîß Please install missing dependencies:")
        print("   pip3 install -r requirements_web.txt")
        return False

if __name__ == '__main__':
    success = main()
    sys.exit(0 if success else 1) 